//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""TouchScreen"",
            ""id"": ""e335ff2e-9345-4f42-b83a-517aaad8794e"",
            ""actions"": [
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""df99dc1f-dc65-4bca-b26c-3065a76b1b35"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomTouch"",
                    ""type"": ""Value"",
                    ""id"": ""4ec4dcb5-1e6b-4fcd-887c-6de479fa67e7"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchCount"",
                    ""type"": ""PassThrough"",
                    ""id"": ""df87f0cc-e899-4ab2-a6dc-a12294f9277c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EtageMinus"",
                    ""type"": ""Button"",
                    ""id"": ""ef86f2e8-2a28-4cca-92d4-7c79bbbb6f8a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EtagePlus"",
                    ""type"": ""Button"",
                    ""id"": ""c61dbb81-c9e4-4525-a2d3-449be0c95bf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d43febcb-efd2-48e5-aa3a-6107fcc18542"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touthscreen"",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90d993a6-8a35-42be-843c-f7f4163138db"",
                    ""path"": ""<Touchscreen>/touch1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a583e190-3166-4c66-9da2-11173bc4aa49"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touthscreen"",
                    ""action"": ""TouchCount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76559d6e-40d1-40ab-940d-42e4764cbd28"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""MultiTap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EtageMinus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a59e15f7-a504-4c73-9e34-54bdbcecbb5b"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""MultiTap(tapCount=3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EtagePlus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Desktop"",
            ""bindingGroup"": ""Desktop"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touthscreen"",
            ""bindingGroup"": ""Touthscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // TouchScreen
        m_TouchScreen = asset.FindActionMap("TouchScreen", throwIfNotFound: true);
        m_TouchScreen_PrimaryTouch = m_TouchScreen.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_TouchScreen_ZoomTouch = m_TouchScreen.FindAction("ZoomTouch", throwIfNotFound: true);
        m_TouchScreen_TouchCount = m_TouchScreen.FindAction("TouchCount", throwIfNotFound: true);
        m_TouchScreen_EtageMinus = m_TouchScreen.FindAction("EtageMinus", throwIfNotFound: true);
        m_TouchScreen_EtagePlus = m_TouchScreen.FindAction("EtagePlus", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchScreen
    private readonly InputActionMap m_TouchScreen;
    private List<ITouchScreenActions> m_TouchScreenActionsCallbackInterfaces = new List<ITouchScreenActions>();
    private readonly InputAction m_TouchScreen_PrimaryTouch;
    private readonly InputAction m_TouchScreen_ZoomTouch;
    private readonly InputAction m_TouchScreen_TouchCount;
    private readonly InputAction m_TouchScreen_EtageMinus;
    private readonly InputAction m_TouchScreen_EtagePlus;
    public struct TouchScreenActions
    {
        private @InputSystem m_Wrapper;
        public TouchScreenActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryTouch => m_Wrapper.m_TouchScreen_PrimaryTouch;
        public InputAction @ZoomTouch => m_Wrapper.m_TouchScreen_ZoomTouch;
        public InputAction @TouchCount => m_Wrapper.m_TouchScreen_TouchCount;
        public InputAction @EtageMinus => m_Wrapper.m_TouchScreen_EtageMinus;
        public InputAction @EtagePlus => m_Wrapper.m_TouchScreen_EtagePlus;
        public InputActionMap Get() { return m_Wrapper.m_TouchScreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchScreenActions set) { return set.Get(); }
        public void AddCallbacks(ITouchScreenActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Add(instance);
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @ZoomTouch.started += instance.OnZoomTouch;
            @ZoomTouch.performed += instance.OnZoomTouch;
            @ZoomTouch.canceled += instance.OnZoomTouch;
            @TouchCount.started += instance.OnTouchCount;
            @TouchCount.performed += instance.OnTouchCount;
            @TouchCount.canceled += instance.OnTouchCount;
            @EtageMinus.started += instance.OnEtageMinus;
            @EtageMinus.performed += instance.OnEtageMinus;
            @EtageMinus.canceled += instance.OnEtageMinus;
            @EtagePlus.started += instance.OnEtagePlus;
            @EtagePlus.performed += instance.OnEtagePlus;
            @EtagePlus.canceled += instance.OnEtagePlus;
        }

        private void UnregisterCallbacks(ITouchScreenActions instance)
        {
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @ZoomTouch.started -= instance.OnZoomTouch;
            @ZoomTouch.performed -= instance.OnZoomTouch;
            @ZoomTouch.canceled -= instance.OnZoomTouch;
            @TouchCount.started -= instance.OnTouchCount;
            @TouchCount.performed -= instance.OnTouchCount;
            @TouchCount.canceled -= instance.OnTouchCount;
            @EtageMinus.started -= instance.OnEtageMinus;
            @EtageMinus.performed -= instance.OnEtageMinus;
            @EtageMinus.canceled -= instance.OnEtageMinus;
            @EtagePlus.started -= instance.OnEtagePlus;
            @EtagePlus.performed -= instance.OnEtagePlus;
            @EtagePlus.canceled -= instance.OnEtagePlus;
        }

        public void RemoveCallbacks(ITouchScreenActions instance)
        {
            if (m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchScreenActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchScreenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchScreenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchScreenActions @TouchScreen => new TouchScreenActions(this);
    private int m_DesktopSchemeIndex = -1;
    public InputControlScheme DesktopScheme
    {
        get
        {
            if (m_DesktopSchemeIndex == -1) m_DesktopSchemeIndex = asset.FindControlSchemeIndex("Desktop");
            return asset.controlSchemes[m_DesktopSchemeIndex];
        }
    }
    private int m_TouthscreenSchemeIndex = -1;
    public InputControlScheme TouthscreenScheme
    {
        get
        {
            if (m_TouthscreenSchemeIndex == -1) m_TouthscreenSchemeIndex = asset.FindControlSchemeIndex("Touthscreen");
            return asset.controlSchemes[m_TouthscreenSchemeIndex];
        }
    }
    public interface ITouchScreenActions
    {
        void OnPrimaryTouch(InputAction.CallbackContext context);
        void OnZoomTouch(InputAction.CallbackContext context);
        void OnTouchCount(InputAction.CallbackContext context);
        void OnEtageMinus(InputAction.CallbackContext context);
        void OnEtagePlus(InputAction.CallbackContext context);
    }
}
